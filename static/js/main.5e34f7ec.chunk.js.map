{"version":3,"sources":["components/restaurant-card/index.js","components/restaurant-swiper/index.js","components/restaurant-list/index.js","App.js","serviceWorker.js","index.js"],"names":["RestaurantCard","props","restaurant","image","name","description","delivery_price","currency","tags","className","src","alt","toFixed","length","map","tag","RestaurantSwiper","restaurants","toggleRestaurantList","useState","cards","setCards","newCards","setNewCards","cardSwiperRef","useRef","useEffect","forEach","card","index","style","zIndex","transform","opacity","cardElements","document","querySelectorAll","newCardsElements","current","classList","add","hammertime","Hammer","on","event","deltaX","center","x","y","toggle","rotate","deltaY","target","remove","moveOutWidth","body","clientWidth","keep","Math","abs","velocityX","endX","max","toX","endY","velocityY","toY","handleClick","love","preventDefault","ref","key","location","id","onClick","RestaurantList","App","data","setRestaurants","search","setSearch","restaurantList","setRestaurantList","searchResults","filter","toLocaleLowerCase","match","includes","context","type","placeholder","value","onChange","cursor","href","rel","role","aria-label","Boolean","window","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"m3mBA+BeA,MA5Bf,SAAwBC,GAAQ,IAAD,EAGzBA,EADFC,WAAcC,EAFa,EAEbA,MAAOC,EAFM,EAENA,KAAMC,EAFA,EAEAA,YAAaC,EAFb,EAEaA,eAAgBC,EAF7B,EAE6BA,SAAUC,EAFvC,EAEuCA,KAGpE,OACE,yBAAKC,UAAU,oBACb,yBAAKA,UAAU,sCACb,yBAAKC,IAAKP,EAAOQ,IAAI,MAEvB,yBAAKF,UAAU,6BACb,6BACE,uBAAGA,UAAU,eAAeL,GAC5B,uBAAGK,UAAU,gBACTH,EAAiB,KAAKM,QAAQ,GADlC,IACoD,QAAbL,EAAqB,8CAAcA,IAG5E,yBAAKE,UAAU,cACb,uBAAGA,UAAU,qBAAqBJ,IAEpC,yBAAKI,UAAU,cACZD,EAAKK,OAAS,GAAKL,EAAKM,KAAI,SAAAC,GAAG,OAAI,uBAAGN,UAAU,aAAaM,U,MC8HzDC,MAjJf,SAA0Bf,GAAQ,IACxBgB,EAAsChB,EAAtCgB,YAAaC,EAAyBjB,EAAzBiB,qBADU,EAELC,mBAAS,IAFJ,mBAExBC,EAFwB,KAEjBC,EAFiB,OAGCF,mBAAS,IAHV,mBAGxBG,EAHwB,KAGdC,EAHc,KAIzBC,EAAgBC,mBAEtBC,qBAAU,WACJJ,GAAYA,EAAST,OAAS,GAChCS,EAASK,SAAQ,SAACC,EAAMC,GACtBD,EAAKE,MAAMC,OAASX,EAAMP,OAASgB,EACnCD,EAAKE,MAAME,UACT,UAAY,GAAKH,GAAS,GAAK,iBAAmB,GAAKA,EAAQ,MACjED,EAAKE,MAAMG,SAAW,GAAKJ,GAAS,QAGvC,CAACP,EAAUF,IAEdM,qBAAU,WACR,IAAMQ,EAAeC,SAASC,iBAAiB,qBACzCC,EAAmBF,SAASC,iBAAiB,mCACnDf,EAASa,GACTX,EAAYc,GACZb,EAAcc,QAAQC,UAAUC,IAAI,YACnC,CAACvB,IAEJS,qBAAU,WACRN,EAAMO,SAAQ,SAACC,GACb,IAAMa,EAAa,IAAIC,IAAOd,GAE9Ba,EAAWE,GAAG,OAAO,WACnBf,EAAKW,UAAUC,IAAI,aAGrBC,EAAWE,GAAG,OAAO,SAACC,GACpB,GAAqB,IAAjBA,EAAMC,SACa,IAAnBD,EAAME,OAAOC,GAA8B,IAAnBH,EAAME,OAAOE,GAAzC,CAEAxB,EAAcc,QAAQC,UAAUU,OAAO,kBAAmBL,EAAMC,OAAS,GACzErB,EAAcc,QAAQC,UAAUU,OAAO,kBAAmBL,EAAMC,OAAS,GAEzE,IAEMK,EAFwB,IAAfN,EAAMC,QACND,EAAMO,OAAS,IAG9BP,EAAMQ,OAAOtB,MAAME,UACjB,aACAY,EAAMC,OACN,OACAD,EAAMO,OACN,cACAD,EACA,WAGJT,EAAWE,GAAG,UAAU,SAACC,GACvBhB,EAAKW,UAAUc,OAAO,UACtB7B,EAAcc,QAAQC,UAAUc,OAAO,mBACvC7B,EAAcc,QAAQC,UAAUc,OAAO,mBAEvC,IAAMC,EAAenB,SAASoB,KAAKC,YAC7BC,EAAOC,KAAKC,IAAIf,EAAMC,QAAU,IAAMa,KAAKC,IAAIf,EAAMgB,WAAa,GAIxE,GAFAhB,EAAMQ,OAAOb,UAAUU,OAAO,WAAYQ,GAEtCA,EACFb,EAAMQ,OAAOtB,MAAME,UAAY,OAC1B,CACL,IAAM6B,EAAOH,KAAKI,IAChBJ,KAAKC,IAAIf,EAAMgB,WAAaN,EAC5BA,GAEIS,EAAMnB,EAAMC,OAAS,EAAIgB,GAAQA,EACjCG,EAAON,KAAKC,IAAIf,EAAMqB,WAAaX,EACnCY,EAAMtB,EAAMO,OAAS,EAAIa,GAAQA,EAGjCd,EAFwB,IAAfN,EAAMC,QACND,EAAMO,OAAS,IAG9BP,EAAMQ,OAAOtB,MAAME,UACjB,aACA+B,EACA,QACCG,EAAMtB,EAAMO,QACb,cACAD,EACA,OACA,IAAMb,EAAmBF,SAASC,iBAAiB,mCACnDb,EAAYc,YAInB,CAACjB,IAEJ,IAAM+C,EAAc,SAACvB,EAAOwB,GAC1BxB,EAAMyB,iBAEN,IAAIf,EAA2C,IAA5BnB,SAASoB,KAAKC,YACjC,GAAIlC,EAAST,QAAU,EACrB,OAAO,EAGT,IAAMe,EAAON,EAAS,GACtBM,EAAKW,UAAUC,IAAI,WAGjBZ,EAAKE,MAAME,UADToC,EAEA,aAAed,EAAe,6BAG9B,cAAgBA,EAAe,4BAGnC,IAAMjB,EAAmBF,SAASC,iBAAiB,mCACnDb,EAAYc,IAGd,OACE,yBAAK5B,UAAU,qBAAqB6D,IAAK9C,GACvC,yBAAKf,UAAU,qBACZQ,EAAYJ,QAAU,EACrB,sDAEAI,EAAYH,KAAI,SAAAZ,GAAU,OACxB,kBAAC,EAAD,CACEqE,IAAG,UAAKrE,EAAWE,KAAhB,YAAwBF,EAAWsE,SAAS,GAA5C,YAAkDtE,EAAWsE,SAAS,IACzEtE,WAAYA,QAKpB,yBAAKO,UAAU,+BACb,4BAAQgE,GAAG,OAAOC,QAAS,SAAA9B,GAAK,OAAIuB,EAAYvB,GAAO,KACrD,uBAAGnC,UAAU,kBAEf,4BAAQgE,GAAG,OAAOC,QAAS,SAAA9B,GAAK,OAAIuB,EAAYvB,GAAO,KACrD,uBAAGnC,UAAU,iBAEf,4BAAQiE,QAAS,kBAAMxD,GAAqB,KAC5C,uBAAGT,UAAU,uB,MCjHNkE,MA1Bf,SAAwB1E,GAAQ,IACtBgB,EAAsChB,EAAtCgB,YAAaC,EAAyBjB,EAAzBiB,qBAErB,OACE,yBAAKT,UAAU,oBACb,yBAAKA,UAAU,qBACZQ,EAAYJ,QAAU,EACrB,sDAEAI,EAAYH,KAAI,SAAAZ,GAAU,OACxB,kBAAC,EAAD,CACEqE,IAAG,UAAKrE,EAAWE,KAAhB,YAAwBF,EAAWsE,SAAS,GAA5C,YAAkDtE,EAAWsE,SAAS,IACzEtE,WAAYA,QAKpB,yBAAKO,UAAU,8BACb,4BAAQiE,QAAS,kBAAMxD,GAAqB,KAC5C,uBAAGT,UAAU,uB,aCsDNmE,MAvEf,WAAgB,IAAD,EACyBzD,mBAAS0D,EAAK5D,aADvC,mBACNA,EADM,KACO6D,EADP,OAEe3D,mBAAS,IAFxB,mBAEN4D,EAFM,KAEEC,EAFF,OAG+B7D,oBAAS,GAHxC,mBAGN8D,EAHM,KAGUC,EAHV,KAebxD,qBAAU,WACR,IAAMyD,EAAgBN,EAAK5D,YAAYmE,QACrC,SAAAlF,GAAU,OACRA,EAAWE,KAAKiF,oBAAoBC,MAAMP,EAAOM,sBACjDnF,EAAWM,KAAK+E,SAASR,EAAOM,sBAChCnF,EAAWG,YACRgF,oBACAC,MAAMP,EAAOM,wBAEpBP,EAAeK,KACd,CAACJ,IAEJ,IAAM7D,EAAuB,SAACsE,GAC5BN,EAAkBM,IAGpB,OACE,yBAAK/E,UAAU,OACb,gCACE,2CACCwE,GACD,yBAAKxE,UAAU,sBACb,2BACEgF,KAAK,OACLC,YAAY,YACZC,MAAOZ,EACPa,SApCW,SAAAhD,GACnBoC,EAAUpC,EAAMQ,OAAOuC,UAqChBZ,EAAOlE,OAAS,EACf,uBACEJ,UAAU,sBACViE,QArCQ,WACdK,EAAOlE,OAAS,GAClBmE,EAAU,KAoCFlD,MAAO,CAAE+D,OAAQ,aAGnB,uBAAGpF,UAAU,oBAKnB,8BACGwE,EACG,kBAAC,EAAD,CAAgBhE,YAAaA,EAAaC,qBAAsBA,IAChE,kBAAC,EAAD,CAAkBD,YAAaA,EAAaC,qBAAsBA,KAGxE,gCACE,uBAAG4E,KAAK,sBAAsBC,IAAI,sBAAsB3C,OAAO,UAC7D,0BAAM4C,KAAK,MAAMC,aAAW,QAA5B,gBADF,mBCxDYC,QACW,cAA7BC,OAAO3B,SAAS4B,UAEe,UAA7BD,OAAO3B,SAAS4B,UAEhBD,OAAO3B,SAAS4B,SAASd,MACvB,2DCZNe,IAASC,OAAO,kBAAC,EAAD,MAASnE,SAASoE,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5e34f7ec.chunk.js","sourcesContent":["import React from 'react'\r\nimport './restaurant-card.scss'\r\n\r\nfunction RestaurantCard(props) {\r\n  const {\r\n    restaurant: { image, name, description, delivery_price, currency, tags },\r\n  } = props\r\n\r\n  return (\r\n    <div className=\"restaurant__card\">\r\n      <div className=\"restaurant__card__image--container\">\r\n        <img src={image} alt=\"\" />\r\n      </div>\r\n      <div className=\"restaurant__card__content\">\r\n        <div>\r\n          <p className=\"card__title\">{name}</p>\r\n          <p className=\"card__price\">\r\n            {(delivery_price / 100).toFixed(2)} {currency === 'EUR' ? <>&euro;</> : currency}\r\n          </p>\r\n        </div>\r\n        <div className=\"card__info\">\r\n          <p className=\"card__description\">{description}</p>\r\n        </div>\r\n        <div className=\"card__tags\">\r\n          {tags.length > 0 && tags.map(tag => <p className=\"card__tag\">{tag}</p>)}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default RestaurantCard\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport Hammer from 'hammerjs'\r\nimport RestaurantCard from '../restaurant-card'\r\nimport './restaurant-swiper.scss'\r\n\r\nfunction RestaurantSwiper(props) {\r\n  const { restaurants, toggleRestaurantList } = props\r\n  const [cards, setCards] = useState([])\r\n  const [newCards, setNewCards] = useState([])\r\n  const cardSwiperRef = useRef()\r\n\r\n  useEffect(() => {\r\n    if (newCards && newCards.length > 0) {\r\n      newCards.forEach((card, index) => {\r\n        card.style.zIndex = cards.length - index\r\n        card.style.transform =\r\n          'scale(' + (20 - index) / 20 + ') translateY(-' + 30 * index + 'px)'\r\n        card.style.opacity = (10 - index) / 10\r\n      })\r\n    }\r\n  }, [newCards, cards])\r\n\r\n  useEffect(() => {\r\n    const cardElements = document.querySelectorAll('.restaurant__card')\r\n    const newCardsElements = document.querySelectorAll('.restaurant__card:not(.removed)')\r\n    setCards(cardElements)\r\n    setNewCards(newCardsElements)\r\n    cardSwiperRef.current.classList.add('loaded')\r\n  }, [restaurants])\r\n\r\n  useEffect(() => {\r\n    cards.forEach((card) => {\r\n      const hammertime = new Hammer(card)\r\n  \r\n      hammertime.on('pan', () => {\r\n        card.classList.add('moving')\r\n      })\r\n  \r\n      hammertime.on('pan', (event) => {\r\n        if (event.deltaX === 0) return\r\n        if (event.center.x === 0 && event.center.y === 0) return\r\n  \r\n        cardSwiperRef.current.classList.toggle('restaurant_love', event.deltaX > 0)\r\n        cardSwiperRef.current.classList.toggle('restaurant_nope', event.deltaX < 0)\r\n  \r\n        const xMulti = event.deltaX * 0.03\r\n        const yMulti = event.deltaY / 80\r\n        const rotate = xMulti * yMulti\r\n  \r\n        event.target.style.transform =\r\n          'translate(' +\r\n          event.deltaX +\r\n          'px, ' +\r\n          event.deltaY +\r\n          'px) rotate(' +\r\n          rotate +\r\n          'deg)'\r\n      })\r\n  \r\n      hammertime.on('panend', (event) => {\r\n        card.classList.remove('moving')\r\n        cardSwiperRef.current.classList.remove('restaurant_love')\r\n        cardSwiperRef.current.classList.remove('restaurant_nope')\r\n  \r\n        const moveOutWidth = document.body.clientWidth\r\n        const keep = Math.abs(event.deltaX) < 80 || Math.abs(event.velocityX) < 0.5\r\n  \r\n        event.target.classList.toggle('removed', !keep)\r\n  \r\n        if (keep) {\r\n          event.target.style.transform = ''\r\n        } else {\r\n          const endX = Math.max(\r\n            Math.abs(event.velocityX) * moveOutWidth,\r\n            moveOutWidth\r\n          )\r\n          const toX = event.deltaX > 0 ? endX : -endX\r\n          const endY = Math.abs(event.velocityY) * moveOutWidth\r\n          const toY = event.deltaY > 0 ? endY : -endY\r\n          const xMulti = event.deltaX * 0.03\r\n          const yMulti = event.deltaY / 80\r\n          const rotate = xMulti * yMulti\r\n  \r\n          event.target.style.transform =\r\n            'translate(' +\r\n            toX +\r\n            'px, ' +\r\n            (toY + event.deltaY) +\r\n            'px) rotate(' +\r\n            rotate +\r\n            'deg)'\r\n            const newCardsElements = document.querySelectorAll('.restaurant__card:not(.removed)')\r\n            setNewCards(newCardsElements)\r\n        }\r\n      })\r\n    })\r\n  }, [cards])\r\n\r\n  const handleClick = (event, love) => {\r\n    event.preventDefault()\r\n\r\n    var moveOutWidth = document.body.clientWidth * 1.5\r\n    if (newCards.length <= 0) {\r\n      return false\r\n    }\r\n\r\n    const card = newCards[0]\r\n    card.classList.add('removed')\r\n\r\n    if (love) {\r\n      card.style.transform =\r\n        'translate(' + moveOutWidth + 'px, -100px) rotate(-30deg)'\r\n    } else {\r\n      card.style.transform =\r\n        'translate(-' + moveOutWidth + 'px, -100px) rotate(30deg)'\r\n    }\r\n\r\n    const newCardsElements = document.querySelectorAll('.restaurant__card:not(.removed)')\r\n    setNewCards(newCardsElements)\r\n  }\r\n\r\n  return (\r\n    <div className=\"restaurant__swiper\" ref={cardSwiperRef}>\r\n      <div className=\"restaurant__cards\">\r\n        {restaurants.length <= 0 ? (\r\n          <p>No restaurants found...</p>\r\n        ) : (\r\n          restaurants.map(restaurant => (\r\n            <RestaurantCard\r\n              key={`${restaurant.name}-${restaurant.location[0]}-${restaurant.location[1]}`}\r\n              restaurant={restaurant}\r\n            />\r\n          ))\r\n        )}\r\n      </div>\r\n      <div className=\"restaurant__swiper__buttons\">\r\n        <button id=\"nope\" onClick={event => handleClick(event, false)}>\r\n          <i className=\"fa fa-remove\"></i>\r\n        </button>\r\n        <button id=\"love\" onClick={event => handleClick(event, true)}>\r\n          <i className=\"fa fa-heart\"></i>\r\n        </button>\r\n        <button onClick={() => toggleRestaurantList(true)}>\r\n        <i className=\"fa fa-th-large\"></i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default RestaurantSwiper\r\n","import React from 'react'\r\nimport RestaurantCard from '../restaurant-card'\r\nimport './restaurant-list.scss'\r\n\r\nfunction RestaurantList(props) {\r\n  const { restaurants, toggleRestaurantList } = props\r\n\r\n  return (\r\n    <div className=\"restaurant__list\">\r\n      <div className=\"restaurant__cards\">\r\n        {restaurants.length <= 0 ? (\r\n          <p>No restaurants found...</p>\r\n        ) : (\r\n          restaurants.map(restaurant => (\r\n            <RestaurantCard\r\n              key={`${restaurant.name}-${restaurant.location[0]}-${restaurant.location[1]}`}\r\n              restaurant={restaurant}\r\n            />\r\n          ))\r\n        )}\r\n      </div>\r\n      <div className=\"restaurant__swiper__button\">\r\n        <button onClick={() => toggleRestaurantList(false)}>\r\n        <i className=\"fa fa-th-large\"></i>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default RestaurantList\r\n","import React, { useState, useEffect } from 'react'\nimport RestaurantSwiper from './components/restaurant-swiper'\nimport RestaurantList from './components/restaurant-list'\nimport data from './restaurants.json'\nimport './App.scss'\n\nfunction App() {\n  const [restaurants, setRestaurants] = useState(data.restaurants)\n  const [search, setSearch] = useState('')\n  const [restaurantList, setRestaurantList] = useState(false)\n\n  const handleChange = event => {\n    setSearch(event.target.value)\n  }\n\n  const clearSearch = () => {\n    if (search.length > 0) {\n      setSearch('')\n    }\n  }\n\n  useEffect(() => {\n    const searchResults = data.restaurants.filter(\n      restaurant =>\n        restaurant.name.toLocaleLowerCase().match(search.toLocaleLowerCase()) ||\n        restaurant.tags.includes(search.toLocaleLowerCase()) ||\n        restaurant.description\n          .toLocaleLowerCase()\n          .match(search.toLocaleLowerCase())\n    )\n    setRestaurants(searchResults)\n  }, [search])\n\n  const toggleRestaurantList = (context) => {\n    setRestaurantList(context)\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Restaurants</h1>\n        {restaurantList && (\n        <div className=\"restaurant__search\">\n          <input\n            type=\"text\"\n            placeholder=\"Search...\"\n            value={search}\n            onChange={handleChange}\n          />\n          {search.length > 0 ? (\n            <i\n              className=\"fas fa-times-circle\"\n              onClick={clearSearch}\n              style={{ cursor: 'pointer' }}\n            />\n          ) : (\n            <i className=\"fas fa-search\" />\n          )}\n        </div>\n        )}\n      </header>\n      <main>\n        {restaurantList\n          ? <RestaurantList restaurants={restaurants} toggleRestaurantList={toggleRestaurantList} />\n          : <RestaurantSwiper restaurants={restaurants} toggleRestaurantList={toggleRestaurantList} />\n        }\n      </main>\n      <footer>\n        <a href=\"http://wesley.codes\" rel=\"noopener noreferrer\" target=\"_blank\">\n          <span role=\"img\" aria-label=\"Hey!\">👋</span>\n          Wesley Moses\n        </a>\n      </footer>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}